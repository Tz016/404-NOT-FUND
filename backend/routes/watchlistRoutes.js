import express from 'express';
const router = express.Router();

import watchlistController from '../controllers/watchlistController.js'; // Adjust the import based on your file structure

/**
 * @swagger
 * /watchlist/add:
 *   post:
 *     summary: Ê∑ªÂä†ËÇ°Á•®Âà∞ËßÇÂØüÂàóË°®
 *     description: Â∞ÜÊåáÂÆöËÇ°Á•®Ê∑ªÂä†Âà∞Áî®Êà∑ÁöÑËßÇÂØüÂàóË°®ÔºåÂπ∂Ëé∑ÂèñÂÆûÊó∂‰ª∑Ê†º
 *     tags:
 *       - ËßÇÂØüÂàóË°®
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - ticker
 *               - accountId
 *             properties:
 *               ticker:
 *                 type: string
 *                 description: ËÇ°Á•®‰ª£Á†Å/Ê†áËØÜÁ¨¶
 *                 example: "AAPL"
 *               types:
 *                 type: string
 *                 description: ËÇ°Á•®Á±ªÂûã(ÂèØÈÄâ)
 *                 example: "stock"
 *               accountId:
 *                 type: integer
 *                 description: ÂÖ≥ËÅîÁöÑË¥¶Êà∑ID
 *                 example: 12345
 *     responses:
 *       201:
 *         description: ÊàêÂäüÊ∑ªÂä†ËßÇÂØüÈ°π
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     watch_id:
 *                       type: integer
 *                       description: ËßÇÂØüÈ°πID
 *                       example: 1
 *                     Account_id:
 *                       type: integer
 *                       example: 12345
 *                     ticker:
 *                       type: string
 *                       example: "AAPL"
 *                     last_price:
 *                       type: number
 *                       format: float
 *                       description: ÂΩìÂâç‰ª∑Ê†º
 *                       example: 150.25
 *       400:
 *         description: Êó†ÊïàËØ∑Ê±ÇÊàñËÇ°Á•®Â∑≤Â≠òÂú®/Êú™ÊâæÂà∞
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "Invalid ticker symbol or stock not found"
 *       500:
 *         description: ÊúçÂä°Âô®ÈîôËØØ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "Database connection failed"
 */
router.post('/add', watchlistController.addWatchlistItem);

/**
 * @swagger
 * /watchlist/search:
 *   get:
 *     summary: ÊêúÁ¥¢ËßÇÂØüÂàóË°®‰∏≠ÁöÑËÇ°Á•®
 *     description: Ê†πÊçÆËÇ°Á•®‰ª£Á†ÅÊü•ËØ¢ÊòØÂê¶Â≠òÂú®‰∫éËßÇÂØüÂàóË°®‰∏≠ÔºåÂπ∂ËøîÂõûÂÆûÊó∂‰ª∑Ê†º‰ø°ÊÅØ
 *     tags:
 *       - ËßÇÂØüÂàóË°®
 *     parameters:
 *       - in: query
 *         name: ticker
 *         schema:
 *           type: string
 *         required: true
 *         description: Ë¶ÅÊêúÁ¥¢ÁöÑËÇ°Á•®‰ª£Á†Å
 *         example: "AAPL"
 *     responses:
 *       200:
 *         description: ÊàêÂäüÊü•ËØ¢ËÇ°Á•®‰ø°ÊÅØ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     watch_id:
 *                       type: integer
 *                       description: ËßÇÂØüÈ°πID(Â¶ÇÊûúÂ≠òÂú®)
 *                       example: 1
 *                     exists:
 *                       type: boolean
 *                       description: ÊòØÂê¶Â≠òÂú®‰∫éËßÇÂØüÂàóË°®
 *                       example: true
 *                     last_price:
 *                       type: number
 *                       format: float
 *                       description: ÊúÄÊñ∞‰ª∑Ê†º
 *                       example: 150.25
 *       400:
 *         description: Áº∫Â∞ëÂøÖË¶ÅÂèÇÊï∞ÊàñÊó†ÊïàËØ∑Ê±Ç
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "Ticker symbol is required"
 *       500:
 *         description: ÊúçÂä°Âô®ÈîôËØØ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "Failed to fetch stock data"
 */
router.get('/search', watchlistController.searchWatchlistItem);

/**
 * @swagger
 * /watchlist/delete:
 *   delete:
 *     summary: ‰ªéËßÇÂØüÂàóË°®‰∏≠Âà†Èô§ËÇ°Á•®
 *     description: Ê†πÊçÆËßÇÂØüÈ°πID‰ªéÁî®Êà∑ÁöÑËßÇÂØüÂàóË°®‰∏≠Âà†Èô§ÊåáÂÆöËÇ°Á•®
 *     tags:
 *       - ËßÇÂØüÂàóË°®
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - watchId
 *             properties:
 *               watchId:
 *                 type: integer
 *                 description: Ë¶ÅÂà†Èô§ÁöÑËßÇÂØüÈ°πID
 *                 example: 123
 *     responses:
 *       200:
 *         description: ÊàêÂäüÂà†Èô§ËßÇÂØüÈ°π
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: int
 *                   example: 1
 *                 data:
 *                   type: object
 *                   properties:
 *                     watch_id:
 *                       type: integer
 *                       description: Ë¢´Âà†Èô§ÁöÑËßÇÂØüÈ°πID
 *                       example: 123
 *       400:
 *         description: Áº∫Â∞ëÂøÖË¶ÅÂèÇÊï∞ÊàñÊó†ÊïàËØ∑Ê±Ç
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "Watch ID is required"
 *       404:
 *         description: ËßÇÂØüÈ°πÊú™ÊâæÂà∞
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "Watchlist item not found"
 *       500:
 *         description: ÊúçÂä°Âô®ÈîôËØØ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "Database operation failed"
 */
router.put('/delete', watchlistController.deleteWatchlistItem);


router.put('/update/addTransaction', watchlistController.updateWatchlistItem);


// üéØ È•ºÂõæÊï∞ÊçÆÊé•Âè£ÔºöÂè™ËøîÂõûÊ≠£Êî∂ÁõäËÇ°Á•®
router.get('/api/pie-data', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    const [rows] = await connection.execute(`
      SELECT symbol, tot_gain_unrl_amt 
      FROM watchlist 
      WHERE status = 'Active' AND tot_gain_unrl_amt > 0
    `);

    const labels = rows.map(row => row.symbol);
    const values = rows.map(row => row.tot_gain_unrl_amt);

    await connection.end();

    res.json({ labels, values });
  } catch (err) {
    console.error('‚ùå Error fetching pie data:', err);
    res.status(500).json({ error: 'Failed to fetch pie chart data' });
  }
});

// üìä Êü±Áä∂ÂõæÊï∞ÊçÆÊé•Âè£ÔºöËøîÂõûÊâÄÊúâ active ÊåÅ‰ªìËÇ°Á•®
router.get('/api/bar-data', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    const [rows] = await connection.execute(`
      SELECT symbol, tot_gain_unrl_amt 
      FROM watchlist 
      WHERE status = 'Active'
    `);

    const labels = rows.map(row => row.symbol);
    const values = rows.map(row => row.tot_gain_unrl_amt);

    await connection.end();

    res.json({ labels, values });
  } catch (err) {
    console.error('‚ùå Error fetching bar data:', err);
    res.status(500).json({ error: 'Failed to fetch bar chart data' });
  }
});

export default router;
